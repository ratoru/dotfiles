#compdef gw

_gw() {
    local curcontext="$curcontext" state line
    typeset -A opt_args

    local projects_dir="$HOME/projects"
    local worktrees_dir="$HOME/projects/worktrees"

    # Define the main arguments
    _arguments -C \
        '(--rm --status --clean)--list[List all worktrees]' \
        '(--list --status --clean)--rm[Remove a worktree]' \
        '(--list --rm --clean)--status[Show detailed worktree status]' \
        '(--list --rm --status)--clean[Remove merged/stale worktrees]' \
        '(--list --rm --status --clean)--help[Show help]' \
        '(--list --rm --status --clean)-h[Show help]' \
        '1: :->project' \
        '2: :->worktree' \
        '3: :->command' \
        '*:: :->command_args' \
        && return 0

    case $state in
        project)
            # Check for flags that don't need project completion
            if [[ "${words[1]}" =~ "^--(list|status|clean|help)$" ]] || [[ "${words[1]}" == "-h" ]]; then
                return 0
            fi

            # Get list of projects (directories in ~/projects that are git repos)
            local -a projects
            for dir in $projects_dir/*(N/); do
                if [[ -d "$dir/.git" ]]; then
                    projects+=(${dir:t})
                fi
            done

            _describe -t projects 'project' projects && return 0
            ;;

        worktree)
            local project="${words[2]}"

            if [[ -z "$project" ]]; then
                return 0
            fi

            local -a worktrees

            # For core project, check both old and new locations
            if [[ "$project" == "core" ]]; then
                # Check old location
                if [[ -d "$projects_dir/core-wts" ]]; then
                    for wt in $projects_dir/core-wts/*(N/); do
                        worktrees+=(${wt:t})
                    done
                fi
                # Check new location
                if [[ -d "$worktrees_dir/core" ]]; then
                    for wt in $worktrees_dir/core/*(N/); do
                        # Avoid duplicates
                        if [[ ! " ${worktrees[@]} " =~ " ${wt:t} " ]]; then
                            worktrees+=(${wt:t})
                        fi
                    done
                fi
            else
                # For other projects, check new location only
                if [[ -d "$worktrees_dir/$project" ]]; then
                    for wt in $worktrees_dir/$project/*(N/); do
                        worktrees+=(${wt:t})
                    done
                fi
            fi

            if (( ${#worktrees} > 0 )); then
                _describe -t worktrees 'existing worktree' worktrees
            else
                _message 'new worktree name'
            fi
            ;;

        command)
            # Suggest common commands when user has typed project and worktree
            local -a common_commands
            common_commands=(
                'claude:Start Claude Code session'
                'just:Run just commands'
                'lg:Lazy Git'
                'pnpm:Run pnpm commands'
                'uv:Run uv commands'
            )

            _describe -t commands 'command' common_commands

            # Also complete regular commands
            _command_names -e
            ;;

        command_args)
            # Let zsh handle completion for the specific command
            words=(${words[4,-1]})
            CURRENT=$((CURRENT - 3))
            _normal
            ;;
    esac
}
